(

$nullable_values := [""," ","Not Applicable","Not Available",
                     "Not applicable",
                     "NOT AVAILABLE","NOT APPLICABLE"];

$to_str := function($x){
  $type($x)='array' ? $join($x,",") : $x
};

$null_string := function($x){
  $x in $nullable_values ? null : $x
};

input ~> |$| 
{
    "issued": $fromMillis($toMillis(issued,'[D01]/[M01]/[Y0001]')),
    "modified": $fromMillis($toMillis(modified,'[D01]/[M01]/[Y0001]')),
    "revisions": revisions,
    "version": version ~> $null_string,
    "summary": summary ~> |$| /*copy summary over and transform it*/
    {
      /*loop over all publisher fields and set blank fields to null */
      "publisher": $each(publisher, function($v, $k) { 
        {$k: $v="" ? null : $v}  
      }) ~> $merge() /* each creates a [{},{}] -- merge them to get {} back*/
      ~> |$|
        {
          "dataUseLimitation": $count(dataUseLimitation)=0 ? null : $join(dataUseLimitation,','),
          "dataUseRequirements": $count(dataUseRequirements)=0 ? null : $join(dataUseRequirements,',')
        }|,
      "keywords": $count(keywords)=0 ? null : $join(keywords,','), /*loop for lists?*/
      "alternateIdentifiers": $count(alternateIdentifiers)=0 ? null : $join(alternateIdentifiers,','),
      "doiName": $length(doiName)=0 ? null : doiName
    }|,
    "documentation": documentation ~> |$| /*copy documentation over and transform it*/
    {
      "description": $length(description)=0 ? null : description,
      "associatedMedia": $count(associatedMedia)=0 ? null : $join(associatedMedia,','), 
      "isPartOf": $count(isPartOf)=0 ? null : isPartOf ~> $join(',') ~> $null_string
    }|,
    "coverage": $each(coverage, function($v, $k) { 
      {$k: $v  ~> $to_str ~> $null_string}  /*something up with spacial coverage*/
    }) ~> $merge(),
    "provenance": {
      "origin": $each(provenance.origin, function($v, $k) { 
        {$k: $v  ~> $to_str ~> $null_string}    
      }) ~> $merge(),
      "temporal": $each(provenance.temporal, function($v, $k) { 
        {$k: $v  ~> $to_str ~> $null_string}    
      }) ~> $merge()
    },
    "accessibility": {
      "usage": $each(accessibility.usage, function($v, $k) { 
        {$k: $v  ~> $to_str ~> $null_string}  
      }) ~> $merge(),
      "access": $each(accessibility.access, function($v, $k) { /*isReferencedBy should be doi */ 
        {$k: $v ~> $to_str ~> $null_string}  
      }) ~> $merge(),
      "formatAndStandards": $each(accessibility.formatAndStandards, function($v, $k) { 
        {$k: $v  ~> $to_str ~> $null_string}   
      }) ~> $merge()
    },
    "structuralMetadata": [$map($$.extra.structuralMetadata, function($smd) { 
      {
        "name":$smd.tableName,
        "description":$smd.tableDescription,
        "elements":[
          {
            "name": $smd.columnName,
            "description": $smd.columnDescription,
            "dataType": $smd.dataType,
            "sensitive": $smd.sensitive
          }
        ]
      }
    })] 
},
['datasetv2.identifier','datasetv2.issued','datasetv2.modified'] 
|
)
(

$nullable_values := [""," ","Not Applicable","Not Available",
                     "Not applicable",
                     "NOT AVAILABLE","NOT APPLICABLE"];

$to_str := function($x){
  $type($x)='array' ? $join($x,",") : $x
};

$null_string := function($x){
  $x in $nullable_values ? null : $x
};


$doi_matcher := /10.\d{4,9}[-._;()/:a-zA-Z0-9]+(?=[\s,/]|$)/i;

$extract_doi := function($x){
  $match($x,$doi_matcher) ~> 
  $map(function($m){
    $m.match
  }) ~> 
  $join(",")
};

input ~> |$| 
{
    "issued": $fromMillis($toMillis(issued,'[D01]/[M01]/[Y0001]')),
    "modified": $fromMillis($toMillis(modified,'[D01]/[M01]/[Y0001]')),
    "revisions": revisions,
    "version": version ~> $null_string,
    "summary": summary ~> |$| /*copy summary over and transform it*/
    {
      /*loop over all publisher fields and set blank fields to null */
      "publisher": $each(publisher, function($v, $k) { 
        {$k: $v ~> $null_string}  
      }) ~> $merge() /* each creates a [{},{}] -- merge them to get {} back*/
      ~> |$|
        {
          "dataUseLimitation": dataUseLimitation ~> $to_str ~> $null_string,
          "dataUseRequirements": dataUseRequirements ~> $to_str ~> $null_string
        }|,
      "keywords": keywords ~> $to_str ~> $null_string, 
      "alternateIdentifiers": alternateIdentifiers ~> $to_str ~> $null_string,
      "doiName": doiName ~> $to_str ~> $extract_doi ~> $null_string
    }|,
    "documentation": documentation ~> |$| /*copy documentation over and transform it*/
    {
      "description": $length(description)=0 ? null : description,
      "associatedMedia": associatedMedia ~> $to_str ~> $null_string,
      "isPartOf": isPartOf ~> $to_str ~> $null_string
    }|,
    "coverage": $each(coverage, function($v, $k) { 
      {$k: $v  ~> $to_str ~> $null_string}  /*something up with spacial coverage*/
    }) ~> $merge(),
    "provenance": {
      "origin": $each(provenance.origin, function($v, $k) { 
        {$k: $v  ~> $to_str ~> $null_string}    
      }) ~> $merge(),
      "temporal": $each(provenance.temporal, function($v, $k) { 
        {$k: $v  ~> $to_str ~> $null_string}    
      }) ~> $merge()
    },
    "accessibility": {
      "usage": $each(accessibility.usage, function($v, $k) { 
        {$k: $v  ~> $to_str ~> $null_string}  
      }) ~> $merge(),
      "access": $each(accessibility.access, function($v, $k) { /*isReferencedBy should be doi */ 
        {$k: $v ~> $to_str ~> $null_string}  
      }) ~> $merge(),
      "formatAndStandards": $each(accessibility.formatAndStandards, function($v, $k) { 
        {$k: $v  ~> $to_str ~> $null_string}   
      }) ~> $merge()
    },
    "enrichmentAndLinkage": enrichmentAndLinkage ~> |$| 
    {
      "qualifiedRelation": qualifiedRelation ~> $to_str ~> $null_string,
      "derivation": derivation ~> $to_str ~> $null_string,
      "tools": tools ~> $to_str ~> $null_string
    }|,
    "observations": observations ? [$map(input.observations,function($r) {
      {
        "observedNode": $uppercase($r.observedNode),
        "measuredValue": $r.measuredValue,
        "observationDate": $r.observationDate,
        "measuredProperty": $r.measuredProperty,
        "disambiguatingDescription": $r.disambiguatingDescription
      }
    })] : [],
    "structuralMetadata": [$map($$.extra.structuralMetadata, function($smd) { 
      {
        "name":$smd.tableName,
        "description":$smd.tableDescription,
        "elements":[
          {
            "name": $smd.columnName,
            "description": $smd.columnDescription,
            "dataType": $smd.dataType,
            "sensitive": $smd.sensitive ~> $null_string = null ? false : $smd.sensitive
          }
        ]
      }
    })] 
},
['datasetv2.identifier','datasetv2.issued','datasetv2.modified'] 
|
)